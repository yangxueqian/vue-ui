{"remainingRequest":"C:\\Users\\yyy\\Desktop\\vue_ui\\vue_app_00\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\yyy\\Desktop\\vue_ui\\vue_app_00\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\yyy\\Desktop\\vue_ui\\vue_app_00\\src\\components\\xz\\Cart.vue?vue&type=script&lang=js","dependencies":[{"path":"C:\\Users\\yyy\\Desktop\\vue_ui\\vue_app_00\\src\\components\\xz\\Cart.vue","mtime":1568618223894},{"path":"C:\\Users\\yyy\\Desktop\\vue_ui\\vue_app_00\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1534853416000},{"path":"C:\\Users\\yyy\\Desktop\\vue_ui\\vue_app_00\\node_modules\\babel-loader\\lib\\index.js","mtime":1529635966000},{"path":"C:\\Users\\yyy\\Desktop\\vue_ui\\vue_app_00\\node_modules\\vue-loader\\lib\\index.js","mtime":1527860006000}],"contextDependencies":[],"result":["import \"core-js/modules/es7.symbol.async-iterator\";\nimport \"core-js/modules/es6.symbol\";\nimport \"core-js/modules/web.dom.iterable\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nexport default {\n  data: function data() {\n    return {\n      list: []\n    };\n  },\n  methods: {\n    selectAll: function selectAll(e) {\n      // 1:获取全选按钮状态\n      var cb = e.target.checked; // console.log(cb);\n      // 2：创建循环遍历购物车数组\n\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = this.list[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var item = _step.value;\n          // 3：将全选状态赋值购物车商品选中状态\n          // item.cb 商品状态=cb全选按钮状态\n          item.cb = cb;\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return != null) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n    },\n    delMitem: function delMitem() {\n      var _this = this;\n\n      // 1:创建变量保存多个购物车中id值\n      var str = \"\"; // 2：创建循环遍历数组获取状态为true的id值\n\n      var _iteratorNormalCompletion2 = true;\n      var _didIteratorError2 = false;\n      var _iteratorError2 = undefined;\n\n      try {\n        for (var _iterator2 = this.list[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n          var item = _step2.value;\n\n          if (item.cb) {\n            str += item.id + \",\";\n          }\n        } // 3：截取字符串中最后的逗号\n\n      } catch (err) {\n        _didIteratorError2 = true;\n        _iteratorError2 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n            _iterator2.return();\n          }\n        } finally {\n          if (_didIteratorError2) {\n            throw _iteratorError2;\n          }\n        }\n      }\n\n      str = str.substring(0, str.length - 1); //console.log(str)   1,2,3\n      // 4：显示交互提示框，再次请用户确认操作\n\n      this.$messagebox.confirm(\"是否删除数据 ？\").then(function (res) {\n        //用户选择确认按钮\n        var url = \"delM\";\n        var ids = {\n          ids: str\n        }; //参数名字ids:值拼接字符串\n\n        _this.axios.get(url, {\n          params: ids\n        }).then(function (res) {\n          _this.loadMore(); //删除多个商品后，加载新的购物车列表\n\n\n          _this.$toast(\"删除成功\");\n        });\n      }).catch(function (err) {\n        console.log(err);\n      }); // 5：发送ajax请求删除多个数据\n      // 6：提示用户删除成功\n      //7:重新加载购物车中数据\n    },\n    loadMore: function loadMore() {\n      var _this2 = this;\n\n      var url = \"cart\";\n      this.axios.get(url).then(function (res) {\n        //console.log(res);\n        //交互：如果用户未登录就想查看购物车，提示请先登录并跳转登录页面\n        if (res.data.code == -1) {\n          _this2.$messagebox(\"消息\", \"请登录\").then(function (res) {\n            _this2.$router.push(\"/Login\");\n\n            return;\n          });\n        } else {\n          var list = res.data.data; //console.log(list);\n          //为了实现购物车多选删除在此创建循环遍历数组并且为每个元素添加cb属性表示，商品前复选框状态\n          //注意先添加cb属性再赋值list  顺序很重要\n          //刷新购物车商品数量时为防止重复清点，应先清空后再加载 \n\n          _this2.$store.commit(\"clearItem\");\n\n          var _iteratorNormalCompletion3 = true;\n          var _didIteratorError3 = false;\n          var _iteratorError3 = undefined;\n\n          try {\n            for (var _iterator3 = list[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n              var item = _step3.value;\n              item.cb = false;\n\n              _this2.$store.commit(\"addItem\"); //修改共享购物车中的数值Vuex\n\n            }\n          } catch (err) {\n            _didIteratorError3 = true;\n            _iteratorError3 = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion3 && _iterator3.return != null) {\n                _iterator3.return();\n              }\n            } finally {\n              if (_didIteratorError3) {\n                throw _iteratorError3;\n              }\n            }\n          }\n\n          _this2.list = list;\n        }\n      });\n    },\n    delItem: function delItem(e) {\n      var _this3 = this;\n\n      var id = e.target.dataset.id; // console.log(id);\n\n      this.$messagebox.confirm(\"是否删除指定商品\").then(function (res) {\n        //同意\n        //发送ajax服务器\n        var url = \"del\";\n        var obj = {\n          id: id\n        };\n\n        _this3.axios.get(url, {\n          params: obj\n        }).then(function (res) {\n          if (res.data.code > 0) {\n            _this3.$toast(\"删除成功\");\n\n            _this3.loadMore();\n          }\n        });\n      }).catch(function (err) {\n        console.log(456);\n      });\n    }\n  },\n  created: function created() {\n    this.loadMore();\n  }\n};",{"version":3,"sources":["Cart.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\r\n    <div class=\"cart\">\r\n        <!-- 1:顶部按钮：全选 -->\r\n        <div>\r\n            全选<input type=\"checkbox\" @change=\"selectAll\"/>\r\n        </div>\r\n        <!-- 2：购物车商品信息 -->\r\n        <div class=\"cart_item\" v-for=\"(item,i) of list\" :key=\"i\">\r\n            <div class=\"leftImgText\">\r\n                <input type=\"checkbox\" v-model=\"item.cb\">\r\n                <img :src=\"'http://127.0.0.1:3000/'+item.img_url\" alt=\"\">\r\n                <div class=\"lname\">\r\n                    {{item.lname}}\r\n                </div>\r\n                <div class=\"price\">{{item.price}}</div>\r\n            </div>\r\n            <mt-button @click=\"delItem\" :data-id=\"item.id\">删除</mt-button>\r\n        </div>\r\n        <!-- 3：商品小计 -->\r\n        <div>\r\n            购物车商品数量 <span style=\"color:red\">{{$store.getters.getCartCount}} </span>\r\n            <mt-button @click=\"delMitem\">删除选中商品</mt-button>\r\n            小计：<span></span>\r\n        </div>\r\n    </div>\r\n</template>\r\n<script>\r\n    export default{\r\n        data(){\r\n            return{\r\n                list:[]\r\n            }\r\n        },\r\n        methods:{\r\n            selectAll(e){\r\n                // 1:获取全选按钮状态\r\n                var cb = e.target.checked;\r\n                // console.log(cb);\r\n                // 2：创建循环遍历购物车数组\r\n                for(var item of this.list){\r\n                // 3：将全选状态赋值购物车商品选中状态\r\n                    // item.cb 商品状态=cb全选按钮状态\r\n                    item.cb = cb;\r\n                }\r\n            },\r\n            delMitem(){\r\n                // 1:创建变量保存多个购物车中id值\r\n                var str = \"\";\r\n                // 2：创建循环遍历数组获取状态为true的id值\r\n                for(var item of this.list){\r\n                    if(item.cb){\r\n                        str += item.id+\",\"\r\n                    }\r\n                }\r\n                // 3：截取字符串中最后的逗号\r\n                str = str.substring(0,str.length-1);\r\n                //console.log(str)   1,2,3\r\n                // 4：显示交互提示框，再次请用户确认操作\r\n                this.$messagebox.confirm(\"是否删除数据 ？\")\r\n                .then(res=>{\r\n                    //用户选择确认按钮\r\n                    var url = \"delM\";\r\n                    var ids = {ids:str};//参数名字ids:值拼接字符串\r\n                    this.axios.get(url,{params:ids}).then(res=>{\r\n                        this.loadMore();//删除多个商品后，加载新的购物车列表\r\n                        this.$toast(\"删除成功\") \r\n                    })\r\n                })\r\n                .catch(err=>{\r\n                    console.log(err);\r\n                })\r\n                // 5：发送ajax请求删除多个数据\r\n                // 6：提示用户删除成功\r\n                //7:重新加载购物车中数据\r\n            },\r\n            loadMore(){\r\n                var url = \"cart\";\r\n                this.axios.get(url).then(res=>{\r\n                    //console.log(res);\r\n                    //交互：如果用户未登录就想查看购物车，提示请先登录并跳转登录页面\r\n                    if(res.data.code == -1){\r\n                        this.$messagebox(\"消息\",\"请登录\").then(res=>{\r\n                            this.$router.push(\"/Login\");\r\n                            return;\r\n                        });\r\n                    }else{\r\n                        var list = res.data.data;\r\n                        //console.log(list);\r\n                        //为了实现购物车多选删除在此创建循环遍历数组并且为每个元素添加cb属性表示，商品前复选框状态\r\n                        //注意先添加cb属性再赋值list  顺序很重要\r\n                        //刷新购物车商品数量时为防止重复清点，应先清空后再加载 \r\n                        this.$store.commit(\"clearItem\");\r\n                        for(var item of list){\r\n                            item.cb = false;\r\n                            this.$store.commit(\"addItem\")//修改共享购物车中的数值Vuex\r\n                        }\r\n                        this.list=list;\r\n                    }\r\n\r\n                })\r\n            },\r\n            delItem(e){\r\n                var id = e.target.dataset.id;\r\n                // console.log(id);\r\n                this.$messagebox.confirm(\"是否删除指定商品\")\r\n                .then(res=>{\r\n                    //同意\r\n                    //发送ajax服务器\r\n                    var url =\"del\";\r\n                    var  obj = {id:id};\r\n                    this.axios.get(url,{params:obj}).then(res=>{\r\n                        if(res.data.code > 0){\r\n                            this.$toast(\"删除成功\");\r\n                            this.loadMore();\r\n                        }\r\n                    })\r\n                })\r\n                .catch(err=>{console.log(456)})\r\n            }\r\n            \r\n        },\r\n        created(){\r\n            this.loadMore();\r\n        }\r\n    }\r\n</script>\r\n<style>\r\n    .cart_item{\r\n        display: flex;\r\n        justify-content: space-between;\r\n        align-items: center;\r\n        border-bottom: 1px solid #ccc;\r\n        margin-top: 25px;\r\n    }\r\n    .cart_item .leftImgText{\r\n        display: flex;\r\n        align-items: center;\r\n    }\r\n    .cart_item .leftImgText img{\r\n        width: 50px;\r\n        height: 50px;\r\n    }\r\n    .cart_item .leftImgText .price{\r\n        color:red;\r\n        margin-left: 25px;\r\n    }\r\n</style>"],"sourceRoot":"src\\components\\xz"}]}